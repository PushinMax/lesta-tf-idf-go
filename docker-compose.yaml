version: '3.8'

services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: text-analyzer-app
    restart: unless-stopped
    expose:
      - "8080"
    networks:
      - analyzer-network
    depends_on:
      postgres:
        condition: service_healthy
      mongodb:  
        condition: service_healthy  
    environment:
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - JWT_ACCESS_SECRET=${JWT_ACCESS_SECRET} 
      - JWT_REFRESH_SECRET=${JWT_REFRESH_SECRET}
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_INITDB_ROOT_USERNAME}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_INITDB_ROOT_PASSWORD}
      - MONGO_DB=${MONGO_DB}
      - MONGO_HOST=mongodb
      - MONGO_PORT=27017  

  postgres:
    image: postgres:latest  
    container_name: postgres_db
    env_file:
      - .env
    environment:
      POSTGRES_USER: ${DB_USER}  
      POSTGRES_PASSWORD: ${DB_PASSWORD} 
      POSTGRES_DB: postgres  
    ports:
      - "5432:5432" # изменить при продакшене 
    networks:
      - analyzer-network  

    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER}"]
      interval: 5s
      timeout: 5s
      retries: 5
  
    volumes:
      - postgres_data:/var/lib/postgresql/data    

  nginx:
    image: nginx:1.25-alpine
    container_name: text-analyzer-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/conf.d:/etc/nginx/conf.d
      - ./static:/app/static:ro
      - ./templates:/app/templates:ro
    depends_on:
      - app
    networks:
      - analyzer-network

  mongodb:
    image: mongo:latest
    container_name: mongodb
    restart: unless-stopped
    env_file:
      - .env
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
    volumes:
      - mongodb_data:/data/db
    networks:
      - analyzer-network
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5
      
networks:
  analyzer-network:
    driver: bridge

volumes:
  postgres_data:  
  mongodb_data:  